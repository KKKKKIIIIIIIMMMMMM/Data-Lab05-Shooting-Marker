#!/usr/bin/env python3
"""
‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Gimbal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏¢‡∏¥‡∏á Blaster ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
- ‡∏¢‡∏¥‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ 3 ‡πÄ‡∏õ‡πâ‡∏≤ ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö ['left', 'center', 'right', 'center', 'left']
- ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö PID ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡πÑ‡∏î‡πâ
- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏∏‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö dynamic
- ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡∏ö Real-time
- ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö Marker
"""

import time
import cv2
import robomaster
from robomaster import robot, vision, gimbal, blaster, camera
import json
import math
import pandas as pd

class AdvancedPIDController:
    """PID Controller ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏£‡πâ‡∏≠‡∏° anti-windup ‡πÅ‡∏•‡∏∞ derivative kick prevention"""
    
    def __init__(self, kp, ki, kd, setpoint=0.5, output_limits=(-100, 100)):
        self.kp = kp
        self.ki = ki
        self.kd = kd
        self.setpoint = setpoint
        self.output_limits = output_limits
        
        # Internal state
        self.prev_error = 0
        self.integral = 0
        self.last_time = time.time()
        self.last_input = 0  # For derivative kick prevention
        
        # Anti-windup
        self.integral_limit = 50
        
    def update(self, current_value):
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì PID output"""
        current_time = time.time()
        dt = current_time - self.last_time
        
        if dt <= 0:
            return 0
            
        error = self.setpoint - current_value
        
        # Proportional term
        p_term = self.kp * error
        
        # Integral term with anti-windup
        self.integral += error * dt
        self.integral = max(min(self.integral, self.integral_limit), -self.integral_limit)
        i_term = self.ki * self.integral
        
        # Derivative term (derivative on measurement to prevent kick)
        d_input = current_value - self.last_input
        d_term = -self.kd * d_input / dt
        
        # Calculate output
        output = p_term + i_term + d_term
        
        # Apply output limits
        output = max(min(output, self.output_limits[1]), self.output_limits[0])
        
        # Update state
        self.prev_error = error
        self.last_time = current_time
        self.last_input = current_value
        
        return output
    
    def reset(self):
        """‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï PID state"""
        self.prev_error = 0
        self.integral = 0
        self.last_time = time.time()
        self.last_input = 0

# Global variables
g_processed_markers = []
performance_log = []

# ‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•‡πÅ‡∏≠‡∏á‡πÄ‡∏Å‡∏¥‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≤‡∏Å sub_angle)
g_yaw_angle = 0.0
g_pitch_angle = 0.0

class MarkerObject:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• marker"""
    def __init__(self, x, y, w, h, info):
        self.x = x
        self.y = y
        self.w = w
        self.h = h
        self.info = info
        self.center_x = int(x * 640)
        self.center_y = int(y * 360)

def on_detect_marker(marker_info):
    """Callback function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö marker"""
    global g_processed_markers
    g_processed_markers.clear()
    for m in marker_info:
        g_processed_markers.append(MarkerObject(*m))

def on_gimbal_angle(angle_info):
    """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏°‡∏∏‡∏°‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏≤‡∏Å encoder: (pitch, yaw, pitch_ground, yaw_ground)"""
    global g_yaw_angle, g_pitch_angle
    try:
        pitch, yaw, _, _ = angle_info
        g_pitch_angle = float(pitch)
        g_yaw_angle = float(yaw)
    except Exception:
        pass

def calculate_target_angles(target_distance, target_spacing):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏∏‡∏° yaw ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢"""
    half_spacing = target_spacing / 2
    angle = math.degrees(math.atan(half_spacing / target_distance))
    
    return {
        'left': -angle,
        'center': 0.0,
        'right': angle
    }

def find_target_marker(target_name, markers):
    """‡∏´‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å markers ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
    if not markers:
        return None
    
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö markers ‡∏ï‡∏≤‡∏° x coordinate (‡∏ã‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡∏Ç‡∏ß‡∏≤)
    sorted_markers = sorted(markers, key=lambda m: m.x)
    
    print(f"üéØ ‡∏û‡∏ö markers ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {len(sorted_markers)} ‡πÄ‡∏õ‡πâ‡∏≤:")
    for i, m in enumerate(sorted_markers):
        print(f"  Marker {i+1}: x={m.x:.3f}, y={m.y:.3f}")
    
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏õ‡πâ‡∏≤‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    if target_name == 'left':
        return sorted_markers[0] if len(sorted_markers) >= 1 else None
    elif target_name == 'center':
        if len(sorted_markers) == 1:
            return sorted_markers[0]
        elif len(sorted_markers) == 2:
            return sorted_markers[0]  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏ã‡πâ‡∏≤‡∏¢‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ 2 ‡∏ï‡∏±‡∏ß
        elif len(sorted_markers) >= 3:
            return sorted_markers[1]  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏Å‡∏•‡∏≤‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ 3 ‡∏ï‡∏±‡∏ß
    elif target_name == 'right':
        if len(sorted_markers) == 2:
            return sorted_markers[1]  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏Ç‡∏ß‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ 2 ‡∏ï‡∏±‡∏ß
        elif len(sorted_markers) >= 3:
            return sorted_markers[2]  # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏Ç‡∏ß‡∏≤‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ 3 ‡∏ï‡∏±‡∏ß
    
    return None

def scan_for_markers(ep_gimbal, duration=5.0):
    """‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤ markers ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß"""
    print("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤ markers...")
    scan_patterns = [
        (0, 0),     # Center
        (-20, 0),   # Left more
        (20, 0),    # Right more
        (-30, 0),   # Far left
        (30, 0),    # Far right
        (0, -10),   # Up
        (0, 10),    # Down
        (-15, -5),  # Left up
        (15, -5),   # Right up
        (-15, 5),   # Left down
        (15, 5),    # Right down
    ]
    
    start_time = time.time()
    best_count = 0
    
    while time.time() - start_time < duration:
        for yaw_speed, pitch_speed in scan_patterns:
            ep_gimbal.drive_speed(yaw_speed=yaw_speed, pitch_speed=pitch_speed)
            time.sleep(0.5)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÉ‡∏´‡πâ gimbal ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏û‡∏ö markers ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            markers_1 = [m for m in g_processed_markers if m.info == '1']
            current_count = len(markers_1)
            
            if current_count > best_count:
                best_count = current_count
                print(f"  ‡∏û‡∏ö markers {current_count} ‡πÄ‡∏õ‡πâ‡∏≤ ‡∏ó‡∏µ‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á yaw={yaw_speed}, pitch={pitch_speed}")
            
            if current_count >= 3:
                ep_gimbal.drive_speed(yaw_speed=0, pitch_speed=0)
                print(f"‚úÖ ‡∏û‡∏ö markers ‡∏Ñ‡∏£‡∏ö {current_count} ‡πÄ‡∏õ‡πâ‡∏≤!")
                return True
                
            # ‡∏´‡∏¢‡∏∏‡∏î‡∏™‡πÅ‡∏Å‡∏ô‡∏ñ‡πâ‡∏≤‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤
            if time.time() - start_time >= duration:
                break
    
    ep_gimbal.drive_speed(yaw_speed=0, pitch_speed=0)
    print(f"‚ö†Ô∏è  ‡∏™‡πÅ‡∏Å‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡∏û‡∏ö markers ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {best_count} ‡πÄ‡∏õ‡πâ‡∏≤")
    return best_count >= 1  # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ True ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 marker

def log_performance(target_name, success, aim_time, error_x, error_y, trace_file=None):
    """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á"""
    performance_log.append({
        'target': target_name,
        'success': success,
        'aim_time': aim_time,
        'final_error_x': error_x,
        'final_error_y': error_y,
        'timestamp': time.time(),
        'trace_file': trace_file
    })

def compute_time_response_metrics(trace_rows, value_key, time_key='t', settle_pct=0.02):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î time response: rise time (10-90%), settling time (¬±2%), overshoot (%)
    - trace_rows: list[dict]
    - value_key: str ‡πÄ‡∏ä‡πà‡∏ô 'gimbal_yaw' ‡∏´‡∏£‡∏∑‡∏≠ 'gimbal_pitch'
    - time_key: str ‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ó‡∏ò‡πå‡πÉ‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    """
    if not trace_rows or len(trace_rows) < 3:
        return None
    times = [row.get(time_key, None) for row in trace_rows]
    values = [row.get(value_key, None) for row in trace_rows]
    if any(v is None for v in values) or any(t is None for t in times):
        return None
    t0 = times[0]
    v0 = values[0]
    vf = values[-1]
    delta = vf - v0
    if abs(delta) < 1e-6:
        return {
            'rise_time': None,
            'settling_time': None,
            'overshoot_pct': 0.0
        }
    # Rise time: first time reaches 10% and 90% of step magnitude
    v10 = v0 + 0.1 * delta
    v90 = v0 + 0.9 * delta
    t10 = None
    t90 = None
    # Determine monotonic direction
    increasing = delta > 0
    for t, v in zip(times, values):
        if t10 is None:
            if (increasing and v >= v10) or ((not increasing) and v <= v10):
                t10 = t
        if t90 is None:
            if (increasing and v >= v90) or ((not increasing) and v <= v90):
                t90 = t
                break
    rise_time = None
    if t10 is not None and t90 is not None:
        rise_time = max(0.0, t90 - t10)
    # Settling time: first time into ¬±settle_pct band of vf and stays there
    band = abs(delta) * settle_pct
    settling_time = None
    for idx, (t, v) in enumerate(zip(times, values)):
        if abs(v - vf) <= band:
            # Check stays within band for the rest
            if all(abs(v2 - vf) <= band for v2 in values[idx:]):
                settling_time = max(0.0, t - t0)
                break
    # Overshoot percentage relative to final value (peak deviation beyond vf)
    if increasing:
        peak = max(values)
        overshoot = peak - vf
    else:
        trough = min(values)
        overshoot = vf - trough
    overshoot_pct = max(0.0, (overshoot / abs(delta)) * 100.0)
    return {
        'rise_time': rise_time,
        'settling_time': settling_time,
        'overshoot_pct': overshoot_pct
    }

def draw_markers_on_image(img, markers):
    """‡∏ß‡∏≤‡∏î markers ‡∏ö‡∏ô‡∏†‡∏≤‡∏û"""
    if img is None:
        return img
        
    for i, marker in enumerate(markers):
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏≤‡∏î‡∏ö‡∏ô‡∏†‡∏≤‡∏û
        x1 = int((marker.x - marker.w/2) * 640)
        y1 = int((marker.y - marker.h/2) * 360)
        x2 = int((marker.x + marker.w/2) * 640)
        y2 = int((marker.y + marker.h/2) * 360)
        center_x = int(marker.x * 640)
        center_y = int(marker.y * 360)
        
        # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö
        cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
        
        # ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        cv2.putText(img, f"Marker {marker.info}", (center_x-30, center_y-10), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
        cv2.putText(img, f"({marker.x:.2f}, {marker.y:.2f})", (center_x-30, center_y+20), 
                   cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
        
        # ‡∏ß‡∏≤‡∏î‡∏à‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á
        cv2.circle(img, (center_x, center_y), 5, (0, 0, 255), -1)
    
    # ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡∏≤‡∏Å‡∏ö‡∏≤‡∏ó‡∏Å‡∏•‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    cv2.line(img, (640-20, 360), (640+20, 360), (255, 0, 0), 2)
    cv2.line(img, (640, 360-20), (640, 360+20), (255, 0, 0), 2)
    
    return img

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("=== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏° Gimbal ===")
    
    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå
    ep_robot = robot.Robot()
    ep_robot.initialize(conn_type="ap")
    
    ep_camera = ep_robot.camera
    ep_gimbal = ep_robot.gimbal
    ep_blaster = ep_robot.blaster
    ep_vision = ep_robot.vision
    
    # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞ vision
    ep_camera.start_video_stream(display=False, resolution=camera.STREAM_360P)
    ep_vision.sub_detect_info(name="marker", callback=on_detect_marker)
    ep_gimbal.recenter().wait_for_completed()
    # ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏°‡∏∏‡∏°‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
    ep_gimbal.sub_angle(freq=50, callback=on_gimbal_angle)
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á
    cv2.namedWindow("Robomaster Camera Feed", cv2.WINDOW_NORMAL)
    cv2.resizeWindow("Robomaster Camera Feed", 640, 360)
    
    print("‡∏´‡∏∏‡πà‡∏ô‡∏¢‡∏ô‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
    time.sleep(2)
    
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ PID
    try:
        with open("pid_values.json", "r") as f:
            pid_config = json.load(f)
        print("‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ PID ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    except FileNotFoundError:
        print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå pid_values.json ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
        pid_config = {
            "yaw": {"kp": 100, "ki": 2, "kd": 60},
            "pitch": {"kp": 100, "ki": 2, "kd": 60}
        }
    
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏∏‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
    TARGET_DISTANCE = 1.0  # ‡πÄ‡∏°‡∏ï‡∏£
    TARGET_SPACING = 0.6   # ‡πÄ‡∏°‡∏ï‡∏£
    target_angles = calculate_target_angles(TARGET_DISTANCE, TARGET_SPACING)
    
    print(f"‡∏°‡∏∏‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢: ‡∏ã‡πâ‡∏≤‡∏¢={target_angles['left']:.1f}¬∞, ‡∏Å‡∏•‡∏≤‡∏á={target_angles['center']:.1f}¬∞, ‡∏Ç‡∏ß‡∏≤={target_angles['right']:.1f}¬∞")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á PID controllers
    pid_yaw = AdvancedPIDController(
        kp=pid_config["yaw"]["kp"],
        ki=pid_config["yaw"]["ki"], 
        kd=pid_config["yaw"]["kd"]
    )
    
    pid_pitch = AdvancedPIDController(
        kp=pid_config["pitch"]["kp"],
        ki=pid_config["pitch"]["ki"],
        kd=pid_config["pitch"]["kd"]
    )
    
    # ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á
    shooting_sequence = ['left', 'center', 'right', 'center', 'left']
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πá‡∏á
    AIM_TOLERANCE = 0.03  # ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πá‡∏á
    MAX_AIM_TIME = 15.0    # ‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πá‡∏á (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    
    print(f"\n=== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á ===")
    print(f"‡∏•‡∏≥‡∏î‡∏±‡∏ö: {shooting_sequence}")
    
    # ‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤ markers ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    print("\nüîç ‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤ markers ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...")
    scan_for_markers(ep_gimbal, duration=8.0)

    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏Å‡πá‡∏ö trace ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏ä‡πá‡∏≠‡∏ï ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏ß‡∏°
    session_ts = time.strftime("%Y%m%d_%H%M%S")
    all_trace_rows = []
    
    for shot_num, target_name in enumerate(shooting_sequence, 1):
        print(f"\n--- ‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {shot_num}: ‡πÄ‡∏õ‡πâ‡∏≤ {target_name.upper()} ---")
        
        # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï PID controllers
        pid_yaw.reset()
        pid_pitch.reset()
        
        # ‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
        target_yaw = target_angles[target_name]
        print(f"‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏°‡∏∏‡∏° {target_yaw:.1f}¬∞")
        ep_gimbal.moveto(pitch=-10, yaw=target_yaw).wait_for_completed()
        time.sleep(0.5)
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö markers
        markers_1 = [m for m in g_processed_markers if m.info == '1']
        print(f"‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö markers ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {len(markers_1)} ‡πÄ‡∏õ‡πâ‡∏≤")
        
        if len(markers_1) == 0:
            print("‡πÑ‡∏°‡πà‡∏û‡∏ö markers ‡πÄ‡∏•‡∏¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πÅ‡∏Å‡∏ô...")
            if not scan_for_markers(ep_gimbal):
                print("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤ markers ‡πÑ‡∏î‡πâ ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏õ‡πâ‡∏≤‡∏ô‡∏µ‡πâ")
                continue
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πá‡∏á‡πÅ‡∏•‡∏∞‡∏¢‡∏¥‡∏á
        aim_start_time = time.time()
        locked = False
        trace_rows = []  # ‡πÄ‡∏Å‡πá‡∏ö time response ‡∏ï‡πà‡∏≠‡∏ä‡πá‡∏≠‡∏ï
        
        for attempt in range(500):  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏≠‡∏á
            # ‡∏≠‡πà‡∏≤‡∏ô‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
            img = ep_camera.read_cv2_image(strategy="newest", timeout=0.1)
            if img is not None:
                # ‡∏ß‡∏≤‡∏î markers ‡∏ö‡∏ô‡∏†‡∏≤‡∏û
                current_markers = [m for m in g_processed_markers if m.info == '1']
                img_with_markers = draw_markers_on_image(img, current_markers)
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                cv2.putText(img_with_markers, f"Target: {target_name.upper()}", (10, 30), 
                           cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 255), 2)
                cv2.putText(img_with_markers, f"Shot: {shot_num}/5", (10, 70), 
                           cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 255), 2)
                cv2.putText(img_with_markers, f"Markers: {len(current_markers)}", (10, 110), 
                           cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 255), 2)
                
                cv2.imshow("Robomaster Camera Feed", img_with_markers)
                cv2.waitKey(1)
            
            # ‡∏´‡∏≤‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            current_markers = [m for m in g_processed_markers if m.info == '1']
            target_marker = find_target_marker(target_name, current_markers)
            
            if not target_marker:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏õ‡πâ‡∏≤ {target_name} ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πÅ‡∏Å‡∏ô‡πÉ‡∏´‡∏°‡πà...")
                ep_gimbal.drive_speed(yaw_speed=0, pitch_speed=0)
                if not scan_for_markers(ep_gimbal, duration=2.0):
                    break
                continue
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì error
            error_x = target_marker.x - 0.5
            error_y = target_marker.y - 0.5
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì PID output
            yaw_speed = -pid_yaw.update(target_marker.x)
            pitch_speed = pid_pitch.update(target_marker.y)
            
            # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á gimbal
            ep_gimbal.drive_speed(yaw_speed=yaw_speed, pitch_speed=pitch_speed)

            # ‡πÄ‡∏Å‡πá‡∏ö time response ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏à‡∏∏‡∏î
            trace_rows.append({
                't': time.time() - aim_start_time,
                'shot': int(shot_num),
                'target': str(target_name),
                'marker_x': float(target_marker.x),
                'marker_y': float(target_marker.y),
                'error_x': float(error_x),
                'error_y': float(error_y),
                'pid_yaw_out': float(yaw_speed),
                'pid_pitch_out': float(pitch_speed),
                'gimbal_yaw': float(g_yaw_angle),
                'gimbal_pitch': float(g_pitch_angle),
                'kp_yaw': float(pid_config["yaw"]["kp"]),
                'ki_yaw': float(pid_config["yaw"]["ki"]),
                'kd_yaw': float(pid_config["yaw"]["kd"]),
                'kp_pitch': float(pid_config["pitch"]["kp"]),
                'ki_pitch': float(pid_config["pitch"]["ki"]),
                'kd_pitch': float(pid_config["pitch"]["kd"])
            })
            
            print(f"‡πÄ‡∏•‡πá‡∏á {target_name}: Error X={error_x:.3f}, Y={error_y:.3f}, Yaw Speed={yaw_speed:.1f}, Pitch Speed={pitch_speed:.1f}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏•‡πá‡∏á‡πÑ‡∏î‡πâ‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if abs(error_x) <= AIM_TOLERANCE and abs(error_y) <= AIM_TOLERANCE:
                print(f"üéØ ‡∏•‡πá‡∏≠‡∏Ñ‡πÄ‡∏õ‡πâ‡∏≤ {target_name.upper()} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                ep_gimbal.drive_speed(yaw_speed=0, pitch_speed=0)
                time.sleep(0.2)  # ‡∏£‡∏≠‡πÉ‡∏´‡πâ gimbal ‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏±‡πà‡∏ô
                
                # ‡∏¢‡∏¥‡∏á!
                ep_blaster.fire(fire_type=blaster.INFRARED_FIRE, times=1)
                print("üî• ‡∏¢‡∏¥‡∏á!")
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞ time response
                aim_time = time.time() - aim_start_time
                trace_filename = f"time_response_shot_{shot_num}_{target_name}.csv"
                try:
                    pd.DataFrame(trace_rows).to_csv(trace_filename, index=False)
                except Exception:
                    trace_filename = None
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì metrics ‡∏Ç‡∏≠‡∏á‡∏°‡∏∏‡∏°‡∏Å‡∏¥‡∏°‡∏ö‡∏≠‡∏•
                yaw_metrics = compute_time_response_metrics(trace_rows, 'gimbal_yaw') or {}
                pitch_metrics = compute_time_response_metrics(trace_rows, 'gimbal_pitch') or {}
                log_entry_extra = {
                    'yaw_rise_time': yaw_metrics.get('rise_time'),
                    'yaw_settling_time': yaw_metrics.get('settling_time'),
                    'yaw_overshoot_pct': yaw_metrics.get('overshoot_pct'),
                    'pitch_rise_time': pitch_metrics.get('rise_time'),
                    'pitch_settling_time': pitch_metrics.get('settling_time'),
                    'pitch_overshoot_pct': pitch_metrics.get('overshoot_pct')
                }
                log_performance(target_name, True, aim_time, error_x, error_y, trace_filename)
                # ‡∏£‡∏ß‡∏° metrics ‡πÄ‡∏Ç‡πâ‡∏≤ entry ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                performance_log[-1].update(log_entry_extra)
                
                locked = True
                time.sleep(1.0)  # ‡∏´‡∏¢‡∏∏‡∏î‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡∏´‡∏•‡∏±‡∏á‡∏¢‡∏¥‡∏á
                break
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö timeout
            if time.time() - aim_start_time > MAX_AIM_TIME:
                print(f"‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πá‡∏á‡πÄ‡∏õ‡πâ‡∏≤ {target_name.upper()}")
                break
                
            time.sleep(0.01)  # ‡∏•‡∏î CPU usage
        
        # ‡∏£‡∏ß‡∏° trace ‡∏Ç‡∏≠‡∏á‡∏ä‡πá‡∏≠‡∏ï‡∏ô‡∏µ‡πâ‡πÄ‡∏Ç‡πâ‡∏≤ all_trace_rows
        all_trace_rows.extend(trace_rows)

        if not locked:
            aim_time = time.time() - aim_start_time
            trace_filename = f"time_response_shot_{shot_num}_{target_name}.csv"
            try:
                pd.DataFrame(trace_rows).to_csv(trace_filename, index=False)
            except Exception:
                trace_filename = None
            yaw_metrics = compute_time_response_metrics(trace_rows, 'gimbal_yaw') or {}
            pitch_metrics = compute_time_response_metrics(trace_rows, 'gimbal_pitch') or {}
            log_entry_extra = {
                'yaw_rise_time': yaw_metrics.get('rise_time'),
                'yaw_settling_time': yaw_metrics.get('settling_time'),
                'yaw_overshoot_pct': yaw_metrics.get('overshoot_pct'),
                'pitch_rise_time': pitch_metrics.get('rise_time'),
                'pitch_settling_time': pitch_metrics.get('settling_time'),
                'pitch_overshoot_pct': pitch_metrics.get('overshoot_pct')
            }
            log_performance(target_name, False, aim_time, 999, 999, trace_filename)
            performance_log[-1].update(log_entry_extra)
            print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡πá‡∏≠‡∏Ñ‡πÄ‡∏õ‡πâ‡∏≤ {target_name.upper()} ‡πÑ‡∏î‡πâ")
        
        ep_gimbal.drive_speed(yaw_speed=0, pitch_speed=0)
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á
    print("\n=== ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏¥‡∏á ===")
    successful_shots = sum(1 for log in performance_log if log['success'])
    total_shots = len(performance_log)
    
    print(f"‡∏¢‡∏¥‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {successful_shots}/{total_shots} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    if total_shots > 0:
        print(f"‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {successful_shots/total_shots*100:.1f}%")
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    if performance_log:
        df = pd.DataFrame(performance_log)
        df.to_csv("shooting_performance.csv", index=False)
        print("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÉ‡∏ô shooting_performance.csv")

    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å time response ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏ä‡πá‡∏≠‡∏ï
    if all_trace_rows:
        combined_csv = f"gimbal_time_response_{session_ts}.csv"
        try:
            pd.DataFrame(all_trace_rows).to_csv(combined_csv, index=False)
            print(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å time response ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏ä‡πá‡∏≠‡∏ï‡πÉ‡∏ô {combined_csv}")
        except Exception as e:
            print(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå time response ‡∏£‡∏ß‡∏°‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
    
    # ‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö
    cv2.destroyAllWindows()
    ep_vision.unsub_detect_info(name="marker")
    ep_gimbal.unsub_angle()
    ep_camera.stop_video_stream()
    ep_robot.close()
    
    print("\nüèÅ ‡∏†‡∏≤‡∏£‡∏Å‡∏¥‡∏à‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        cv2.destroyAllWindows()
    except Exception as e:
        print(f"\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        import traceback
        traceback.print_exc()
        cv2.destroyAllWindows()

